import { NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/mongodb-fixed';

// Configuration Next.js 14 pour les limites de requ√™te
export const maxDuration = 30; // 30 secondes timeout
export const dynamic = 'force-dynamic';

export async function PUT(request: Request, { params }: { params: { id: string } }) {
  try {
    console.log('üîç API Products PUT - Request pour ID:', params.id);
    
    const { db } = await connectToDatabase();
    const productsCollection = db.collection('products');
    
    const data = await request.json();
    console.log('üìù Donn√©es re√ßues pour mise √† jour:', data);
    
    // Supprimer les champs immutables avant mise √† jour
    const { _id, createdAt, __v, ...updateData } = data;
    updateData.updatedAt = new Date();
    
    console.log('üîÑ Donn√©es nettoy√©es pour update:', updateData);
    
    const { ObjectId } = require('mongodb');
    
    // V√©rifier la validit√© de l'ID
    console.log('üîç ID re√ßu:', params.id);
    if (!ObjectId.isValid(params.id)) {
      console.log('‚ùå ID invalide:', params.id);
      return NextResponse.json({ error: 'ID produit invalide' }, { status: 400 });
    }
    
    const objectId = new ObjectId(params.id);
    console.log('üîç ObjectId cr√©√©:', objectId);
    
    // D'abord v√©rifier si le produit existe
    const existingProduct = await productsCollection.findOne({ _id: objectId });
    console.log('üîç Produit existant trouv√©:', existingProduct ? 'OUI' : 'NON');
    
    if (!existingProduct) {
      console.log('‚ùå Produit inexistant avec ID:', params.id);
      // Lister quelques produits pour debug
      const allProducts = await productsCollection.find({}).limit(3).toArray();
      console.log('üìã Exemples produits en base:', allProducts.map(p => ({ id: p._id, name: p.name })));
      return NextResponse.json({ error: 'Produit non trouv√© en base' }, { status: 404 });
    }
    
    console.log('‚úÖ Produit existe, tentative mise √† jour...');
    const result = await productsCollection.findOneAndUpdate(
      { _id: objectId },
      { $set: updateData },
      { returnDocument: 'after' }
    );

    if (!result.value) {
      console.log('‚ùå √âchec mise √† jour malgr√© produit existant');
      return NextResponse.json({ error: '√âchec mise √† jour' }, { status: 500 });
    }

    console.log('‚úÖ Produit mis √† jour:', result.value);
    return NextResponse.json(result.value);
  } catch (error) {
    console.error('‚ùå Erreur lors de la modification:', error);
    return NextResponse.json({ 
      error: 'Erreur lors de la modification',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 });
  }
}

export async function DELETE(request: Request, { params }: { params: { id: string } }) {
  try {
    console.log('üîç API Products DELETE - Request pour ID:', params.id);
    
    const { db } = await connectToDatabase();
    const productsCollection = db.collection('products');
    
    const { ObjectId } = require('mongodb');
    const result = await productsCollection.findOneAndDelete({ _id: new ObjectId(params.id) });

    if (!result.value) {
      console.log('‚ùå Produit non trouv√© pour suppression:', params.id);
      return NextResponse.json({ error: 'Produit non trouv√©' }, { status: 404 });
    }

    console.log('‚úÖ Produit supprim√©:', result.value);
    return NextResponse.json({ message: 'Produit supprim√© avec succ√®s' });
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression:', error);
    return NextResponse.json({ 
      error: 'Erreur lors de la suppression',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 });
  }
}

export async function GET(request: Request, { params }: { params: { id: string } }) {
  try {
    console.log('üîç API Products GET - Request pour ID:', params.id);
    
    const { db } = await connectToDatabase();
    const productsCollection = db.collection('products');
    
    const { ObjectId } = require('mongodb');
    const product = await productsCollection.findOne({ _id: new ObjectId(params.id) });

    if (!product) {
      console.log('‚ùå Produit non trouv√©:', params.id);
      return NextResponse.json({ error: 'Produit non trouv√©' }, { status: 404 });
    }

    console.log('‚úÖ Produit trouv√©:', product);
    return NextResponse.json(product);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
    return NextResponse.json({ 
      error: 'Erreur lors de la r√©cup√©ration',
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 });
  }
}